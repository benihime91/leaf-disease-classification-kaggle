# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00b_fastai.core.ipynb (unless otherwise specified).

__all__ = ['AlbumentationsTransform', 'timm_learner', 'timm_splitter']

# Cell
import albumentations as A
from fastai.vision.all import *
from ..core import *
from ..layers import *
from ..networks import *

# Cell
class AlbumentationsTransform(RandTransform):
    "fast.ai type transformations using albumentation transform functions"
    split_idx, order = None, 2

    def __init__(self, train_aug: A.Compose, valid_aug: A.Compose):
        store_attr()

    def before_call(self, b, split_idx):
        self.idx = split_idx

    def encodes(self, img: PILImage):
        if self.idx == 0:
            aug_img = self.train_aug(image=np.array(img))["image"]
        else:
            aug_img = self.valid_aug(image=np.array(img))["image"]
        return PILImage.create(aug_img)

# Cell
@delegates(Learner)
def timm_learner(dls:DataLoaders, encoder:nn.Module, cut:int, act_func:callable=nn.ReLU(inplace=True),
                init:bool = True, state:bool = None, mod_func: callable = None, **kwargs):
    "creates a learner instance for a `timm` model"
    model = TransferLearningModel(encoder, dls.c, cut, act=act_func)
    if init: apply_init(model.fc)
    if state is not None: model.load_state_dict(torch.load(state))
    if mod_func is not None: mod_func(model)
    learn = Learner(dls, model, **kwargs)
    return learn

# Cell
def timm_splitter(model:TransferLearningModel):
    return [params(model.encoder), params(model.fc)]
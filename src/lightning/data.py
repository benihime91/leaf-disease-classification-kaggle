# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05_lightning.data.ipynb (unless otherwise specified).

__all__ = ['CassavaLightningDataModule']

# Cell
import pandas as pd
import torch
from torch.utils.data import DataLoader
import albumentations as A
from omegaconf import DictConfig
from pytorch_lightning import LightningDataModule

from ..core import *

# Cell
class CassavaLightningDataModule(LightningDataModule):
    "lightning-datamodule for cassave leaf disease classification"

    def __init__(
        self,
        df_path: str,
        im_dir: str,
        curr_fold: int,
        default_config: DictConfig,
        train_augs: A.Compose = None,
        valid_augs: A.Compose = None,
        bs: int = 64,
        num_workers: int = 0,
    ):

        super().__init__()
        self.df = load_dataset(df_path, im_dir, curr_fold, True)
        self.train_augs = train_augs

        self.bs = bs
        self.workers = num_workers

        self.curr_fold = curr_fold
        self.im_dir = im_dir

        self.config = default_config

        if self.config.augmentations.backend == "custom":
            self.valid_augs = get_valid_transformations(self.config.augmentations.valid)
        else:
            self.valid_augs = valid_augs

    def prepare_data(self) -> None:
        self.train_df: pd.DataFrame = self.df.loc[self.df["is_valid"] == False]
        self.valid_df: pd.DataFrame = self.df.loc[self.df["is_valid"] == True]

        self.train_df = self.train_df.reset_index(inplace=False, drop=True)
        self.valid_df = self.valid_df.reset_index(inplace=False, drop=True)

    def setup(self, stage=None) -> None:
        if stage == "fit" or stage is None:
            if self.config.augmentations.backend == "custom":
                self.train_ds = FancyImageDataset(self.train_df, cfg=self.config)
                self.valid_ds = FancyImageDataset(self.valid_df, cfg=self.config, transforms=self.valid_augs)

            elif self.config.augmentations.backend == "albumentations":
                self.train_ds = ImageClassificationFromDf(self.train_df, self.train_augs)
                self.valid_ds = ImageClassificationFromDf(self.valid_df, self.valid_augs)

        if stage == "test" or stage is None:
            if self.config.augmentations.backend == "custom":
                self.test_ds = FancyImageDataset(self.valid_df, cfg=self.config, transforms=self.valid_augs)

            elif self.config.augmentations.backend == "albumentations":
                self.test_ds = ImageClassificationFromDf(self.valid_df, self.valid_augs)

    def train_dataloader(self) -> DataLoader:
        return DataLoader(self.train_ds, shuffle=True, batch_size=self.bs, num_workers=self.workers,                                         pin_memory=True if torch.cuda.is_available() else False,)

    def val_dataloader(self) -> DataLoader:
        return DataLoader(self.valid_ds, batch_size=self.bs, num_workers=self.workers,shuffle=False,
                         pin_memory=True if torch.cuda.is_available() else False,)

    def test_dataloader(self) -> DataLoader:
        return DataLoader(self.test_ds, batch_size=self.bs, num_workers=self.workers,
                          shuffle=False, pin_memory=True if torch.cuda.is_available() else False,)
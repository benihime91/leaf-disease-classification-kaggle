# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05_lightning.core.ipynb (unless otherwise specified).

__all__ = ['CassavaLightningDataModule', 'LightningCassava']

# Cell
import logging

from typing import Optional, Callable, Union, Dict

import albumentations as A
import pandas as pd

import torch
from torch import nn
import torch.nn.functional as F
from torch.utils.data import DataLoader

import pytorch_lightning as pl
from pytorch_lightning import _logger as log

from ..core import *
from ..losses import *
from ..layers import *
from ..networks import *
from ..mixmethods import *

from hydra.utils import instantiate, call
from omegaconf import OmegaConf, DictConfig

# Cell
class CassavaLightningDataModule(pl.LightningDataModule):
    "lightning-datamodule for cassave leaf disease classification"
    def __init__(self, df_path:str, im_dir:str, curr_fold: int,
                 train_augs: A.Compose, valid_augs: A.Compose, bs: int = 64,
                 num_workers: int=0):

        super().__init__()
        self.df = load_dataset(df_path, im_dir, curr_fold, True)
        self.train_augs, self.valid_augs = train_augs, valid_augs
        self.bs, self.workers = bs, num_workers
        self.curr_fold = curr_fold
        self.im_dir = im_dir

        self.logger = logging.getLogger(__name__)

    def prepare_data(self):
        self.logger.info(f'DATA: {self.im_dir}')
        self.logger.info(f'FOLD: {self.curr_fold}  BATCH_SIZE: {self.bs}')

        self.train_df: pd.DataFrame = self.df.loc[self.df['is_valid'] == False]
        self.valid_df: pd.DataFrame = self.df.loc[self.df['is_valid'] == True]

        self.train_df = self.train_df.reset_index(inplace=False, drop=True)
        self.valid_df = self.valid_df.reset_index(inplace=False, drop=True)

    def setup(self, stage=None):
        if stage == "fit" or stage is None:
            self.train_ds = ImageClassificationFromDf(self.train_df, self.train_augs)
            self.valid_ds = ImageClassificationFromDf(self.valid_df, self.valid_augs)
        if stage == "test" or stage is None:
            self.test_ds  = ImageClassificationFromDf(self.valid_df, self.valid_augs)

    def train_dataloader(self):
        return DataLoader(self.train_ds, shuffle=True, batch_size=self.bs, num_workers=self.workers)

    def val_dataloader(self):
        return DataLoader(self.valid_ds, batch_size=self.bs, num_workers=self.workers, shuffle=False)

    def test_dataloader(self):
        return DataLoader(self.test_ds, batch_size=self.bs, num_workers=self.workers, shuffle=False)

# Cell
#TODO: add midlevel classification branch in learning.
class LightningCassava(pl.LightningModule):
    """LightningModule wrapper for `TransferLearningModel`"""
    def __init__(self, model:Union[TransferLearningModel, SnapMixTransferLearningModel], conf:DictConfig=None):

        super().__init__()

        self.model    = model
        self._log     = logging.getLogger(__name__)
        self.accuracy = pl.metrics.Accuracy()

        self.save_hyperparameters(conf)

        try    : mixmethod = instantiate(self.hparams['mixmethod'])
        except : mixmethod = None

        if mixmethod is not None:
            if isinstance(mixmethod, SnapMix):
                assert isinstance(self.model, SnapMixTransferLearningModel)

        self.mix_fn    = mixmethod
        self.loss_func = instantiate(self.hparams['loss'])

        if self.mix_fn is not None:
            self._log.info(f'Mixmethod : {self.mix_fn.__class__.__name__}')

        self._log.info(f'Loss Function : {self.loss_func}')

        self.val_labels_list = []
        self.val_preds_list  = []
        self.one_batch       = None

    def forward(self, xb):
        return self.model(xb)

    def training_step(self, batch, batch_idx):
        x, y = batch

        if self.mix_fn is not None:
            x     = self.mix_fn(x, y, self.model)
            y_hat = self(x)
            loss  = self.mix_fn.loss(self.loss_func, y_hat)

        else:
            y_hat = self(x)
            loss  = self.loss_func(y_hat, y)

        self.one_batch = x

        train_acc = self.accuracy(y_hat, y)

        self.log('train/loss', loss, on_epoch=True)
        self.log('train/acc',  train_acc, on_epoch=True)
        return loss

    def validation_step(self, batch, batch_idx):
        x, y  = batch
        y_hat = self(x)
        loss  = self.loss_func(y_hat, y)
        acc   = self.accuracy(y_hat, y)

        # For confusion matrix purposes
        preds = torch.argmax(y_hat, 1)
        val_labels = y.data.cpu().numpy()
        val_preds  = preds.data.cpu().numpy()

        self.val_preds_list  = self.val_preds_list  + list(val_preds)
        self.val_labels_list = self.val_labels_list + list(val_labels)

        metrics = {'valid/loss': loss, 'valid/acc': acc}

        self.log_dict(metrics)

    def test_step(self, batch, batch_idx):
        x, y  = batch
        y_hat = self(x)

        loss  = self.loss_func(y_hat, y)
        acc   = self.accuracy(y_hat, y)

        metrics = {'test/loss': loss, 'test/acc': acc}
        self.log_dict(metrics)

    def configure_optimizers(self):
        base_lr    = self.hparams["learning_rate"]
        encoder_lr = base_lr/self.hparams["lr_mult"]
        param_list = [
            {'params': self.param_list[0], 'lr': encoder_lr},
            {'params': self.param_list[1], 'lr': base_lr}
        ]

        opt = instantiate(self.hparams["optimizer"], params=param_list)

        if self.hparams["scheduler"] is not None:

            if self.hparams["scheduler"]["_target_"] == "torch.optim.lr_scheduler.OneCycleLR":
                steps = len(self.train_dataloader()) // self.trainer.accumulate_grad_batches
                lr_list = [base_lr/self.hparams["lr_mult"], base_lr]
                kwargs  = dict(optimizer=opt, max_lr=lr_list, steps_per_epoch=steps)

                sch = instantiate(self.hparams["scheduler"], **kwargs)

            elif self.hparams["scheduler"]["_target_"] == "src.opts.FlatCos":
                steps = len(self.train_dataloader()) // self.trainer.accumulate_grad_batches
                sch = instantiate(self.hparams["scheduler"], optimizer=opt, steps_per_epoch=steps)

            elif self.hparams["scheduler"]["_target_"] == "src.opts.CosineAnnealingWarmupScheduler":
                steps = len(self.train_dataloader()) // self.trainer.accumulate_grad_batches
                sch = instantiate(self.hparams["scheduler"], optimizer=opt, steps_per_epoch=steps)

            else:
                sch = instantiate(self.hparams["scheduler"], optimizer=opt)

            # convert scheduler to lightning format
            sch = {'scheduler': sch,
                   'monitor'  : self.hparams['metric_to_track'],
                   'interval' : self.hparams['scheduler_interval'],
                   'frequency': 1}

            self._log.info(f"Optimizer: {opt.__class__.__name__}  LR's: {(encoder_lr, base_lr)}")
            self._log.info(f"LR Scheculer: {sch['scheduler'].__class__.__name__}")
            return [opt], [sch]

        else:
            log.info(f"Optimizer: {opt.__class__.__name__}  LR's: {(encoder_lr, base_lr)}")
            return [opt]

    @property
    def param_list(self):
        "returns the list of parameters [params of encoder, params of fc]"
        param_list = [params(self.model.encoder), params(self.model.fc)]
        return param_list

    def load_state_from_checkpoint(self, path:str):
        "loads in the weights of the LightningModule from given checkpoint"
        checkpoint = torch.load(path, map_location=self.device)
        self.load_state_dict(checkpoint['state_dict'])
        self._log.info(f"Weights loaded from checkpoint : {path}")

    def save_model_weights(self, path:str):
        "saves weights of self.model"
        state = self.model.state_dict()
        torch.save(state, path)
        self._log.info(f'weights saved to {path}')

    def load_model_weights(self, path:str):
        "loads weights of self.model"
        state_dict = torch.load(path)
        self.model.load_state_dict(state_dict)
        self._log.info(f'weights loaded from {path}')